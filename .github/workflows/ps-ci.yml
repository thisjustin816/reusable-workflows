name: CI

on:
  workflow_call:

jobs:
  build:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Build
        id: build
        shell: pwsh
        run: |
          $build = ./build.ps1
          $build

          $moduleName = $build[1].Name
          echo "::set-output name=moduleName::$moduleName"

          $moduleVersion = $build[1].ModuleBase | Split-Path -Leaf
          echo "::set-output name=moduleVersion::$moduleVersion"

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action/windows@v2
        if: always()
        with:
          files: tests/testResults.xml
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.x
          dotnet-quality: 'ga'

      - name: Convert Code Coverage to Publishable Cobertura
        # https://reportgenerator.io/usage
        uses: danielpalme/ReportGenerator-GitHub-Action@5.3.0
        with:
          reports: tests/coverage.xml
          targetdir: tests/coverage
          reporttypes: Cobertura
          sourcedirs: src

      - name: Publish Code Coverage
        uses: 5monkeys/cobertura-action@v14
        if: github.event_name == 'pull_request'
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          path: tests/coverage/Cobertura.xml
          minimum_coverage: 75
          fail_below_threshold: false
          only_changed_files: true

      - name: Check for Published Module
        shell: pwsh
        run: |
          $publishedModule = Find-PSResource `
              -Name '${{ steps.build.outputs.moduleName }}' `
              -Version '${{ steps.build.outputs.moduleVersion }}' `
              -Repository PSGallery `
              -ErrorAction SilentlyContinue
          if ($publishedModule) {
              throw "${{ steps.build.outputs.moduleName }} ${{ steps.build.outputs.moduleVersion }} already exists in the PSGallery"
          }
          else {
              Write-Host -Object "${{ steps.build.outputs.moduleName }} ${{ steps.build.outputs.moduleVersion }} not found in the PSGallery"
          }

      - name: Publish to PowerShell Gallery
        id: publish
        if: success() && (github.event.inputs.publish == 'true' || github.ref == 'refs/heads/main')
        shell: pwsh
        run: |
          if (
              ('${{ github.ref }}' -ne 'refs/heads/main') -and
              ('${{ steps.build.outputs.moduleVersion }}' -notmatch 'preview')
          ) {
              throw "Only preview versions can be published from non-main branches."
          }
          ./publish.ps1
        env:
          PSGALLERYAPIKEY: ${{ secrets.PSGALLERYAPIKEY }}

      - name: Tag Release
        id: tag_release
        if: steps.publish.outcome == 'success' && github.ref == 'refs/heads/main'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo
            const tag = `${{ steps.build.outputs.moduleVersion }}`
            await github.rest.git.createRef({
              owner,
              repo,
              ref: `refs/tags/${tag}`,
              sha: context.sha
            })

      - name: Create Release
        if: steps.tag_release.outcome == 'success' && github.ref == 'refs/heads/main'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.build.outputs.moduleVersion }}
          release_name: Release ${{ steps.build.outputs.moduleVersion }}
          body: |
            ${{ github.event.commits[0].message }}

            https://www.powershellgallery.com/packages/${{ steps.build.outputs.moduleName }}/${{ steps.build.outputs.moduleVersion }}
          draft: false
          prerelease: false